// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_role.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_role (user_id, role_id)
VALUES ($1, $2)
RETURNING id, user_id, role_id, created_at, updated_at, verified_at
`

type CreateUserRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID int32     `json:"role_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
	)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :one
DELETE
FROM user_role
WHERE id = $1
RETURNING id, user_id, role_id, created_at, updated_at, verified_at
`

func (q *Queries) DeleteUserRole(ctx context.Context, id uuid.UUID) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, deleteUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, user_id, role_id, created_at, updated_at, verified_at
FROM user_role
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
	)
	return i, err
}

const listUserRoles = `-- name: ListUserRoles :many
SELECT id, user_id, role_id, created_at, updated_at, verified_at
FROM user_role
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUserRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserRoles(ctx context.Context, arg ListUserRolesParams) ([]UserRole, error) {
	rows, err := q.db.QueryContext(ctx, listUserRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VerifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE user_role
SET role_id    = $2,
    updated_at = STATEMENT_TIMESTAMP()
WHERE id = $1
RETURNING id, user_id, role_id, created_at, updated_at, verified_at
`

type UpdateUserRoleParams struct {
	ID     uuid.UUID `json:"id"`
	RoleID int32     `json:"role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, arg.ID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
	)
	return i, err
}
